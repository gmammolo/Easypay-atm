# reference postgress: https://stackabuse.com/implementing-hibernate-with-spring-boot-and-postgresql/

# DATABASE_URL
# Su heroku \u00e8 configurata l'env DATABASE_URL= postgres://omhvrlnetpmzvk:ac125bf99641cedfad17fcb4cc367d85c3525a1ec072bfd07620d4d6364ddf9a@ec2-54-78-127-245.eu-west-1.compute.amazonaws.com:5432/d6cvjdtbkvd4gr
# da codice si pu\u00f2 accedere con: `process.env.DATABASE_URL`
# reference (https://devcenter.heroku.com/articles/config-vars)


# Database Properties
spring.datasource.url=jdbc:postgresql://localhost:5432/phonesdemo
spring.datasource.username=omhvrlnetpmzvk
spring.datasource.password=ac125bf99641cedfad17fcb4cc367d85c3525a1ec072bfd07620d4d6364ddf9a


# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create-drop

# Hibernate Properties
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL92Dialect
#
spring.main.allow-bean-definition-overriding=true

#logging.level.org.springframework=TRACE
logging.level.org.springframework=DEBUG
#logging.level.org.springframework=INFO

springfox.documentation.swagger.v2.path=/api-docs

# Hibernate provides an H2 Console that we can use to check the status of the 
# database and even perform data entry via a user interface.
spring.h2.console.enabled=true